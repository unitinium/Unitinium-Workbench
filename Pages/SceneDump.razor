@page "/scene-dump"
@inject Config config
@inject HttpClient Http
@using System.Linq
@using System.Collections 
@using Newtonsoft.Json

<button onclick=@Dump class="btn btn-primary mb-3">Dump scene</button>

@if(error != null)
{
    <div class="alert alert-danger" role="alert">
        <h4 class="alert-heading">Error!</h4>
        <p>@error</p>
    </div>
}
else
{
    <MonacoEditor ref="_editor" Model=@_editorModel FullScreen="true" />
}

@functions {
    string error = null;

    private EditorModel _editorModel { get; set; }
    private MonacoEditor _editor;
    private EditorOptions _options;

    protected override void OnInit()
    {
        _options = new EditorOptions()
        {
            Value = "",
            Language = "csharp",
            Theme = "vs-dark",
            Minimap = new MinimapOptions()
            {
                Enabled = false
            }
        };
        _editorModel = new EditorModel(_options);
    }

    async Task Dump()
    {
        error = null;
        JsonRpcResponseData<object> response = null;
        try
        {
            response = await Http.PostJsonAsync<JsonRpcResponseData<object>>($"{config.Host}:{config.Port}",
            new JsonRpcRequestData()
            {
                method = "sceneDump"
            });
        }
        catch(Exception e)
        {
            error = e.ToString();
            return;
        }

        if(response.error != null)
        {
            error = (string)response.error;
            return;
        }

        await _editor.SetValue(JsonConvert.SerializeObject(response.result, Formatting.Indented));

        this.StateHasChanged();
    }
}
